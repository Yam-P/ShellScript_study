@ Chapter 1 Summary

* Alias
$ alias ls='ls --color=auto --time-style=long-iso'
: xxxx-xx-xx 형식으로 날짜 포맷 변경 
$ alias ls='ls --color=auto --time-style=locale'
: 가장 처음에 설정했던 방식으로 바꾸기
$ alias ls='ls --color=auto --time-style=full-iso'
: 가장 정확한 시간 설정 방식으로 바꾸기
$ source /etc/bashrc
$ source .bash_aliases
: 변경사항 환경에 적용하기

$ env | grep LANG
: 환경 변수 중 언어 관련 설정 보기

#!/bin/bash: 배시셀의 경우 가장 윗단에 작성
#!/usr/bin/python: 파이썬의 경우

* ENV VARIABLE
$ echo $SHELL
: 현재 사용중인 쉘 종류를 나타내줌
$ ps $$
$ echo $$
: $는 현재 shell의 PID를 가지는 변수
$ env
$ printenv
$ printf "%s\n" $FILENAME
$ echo "$FILENAME" 혹은 echo "${FILENAME}"
: (특정)환경변수 출력하기
$ date '+%H:%M:%S'
: 오늘 날짜와 시간을 위와 같은 형식으로 출력
$ FILENAME="test.txt"
: 변수명 작성시, ""로 묶기. 공백이 생기면 error
$ DATE=`date` 혹은 DATE=$(date)
: 기존 변수를 새로운 변수에 할당하기
$ set
: 환경변수를 포함하여 모든 변수들과 함수들 목록 보여줌.
$ set a b c d
: a, b, c, d 변수를 세팅.
$ echo $1
: a를 출력
$ echo $*
: a, b, c, d를 출력
$ echo \$#
: set을 이용해서 생성된 변수의 수 출력
$ export VAR="value"
: 지역 변수를 환경 변수로 바꾸는 방법.
$ cal
: 달력을 보여줌


$ logout
$ exit
: 현재의 쉘을 종료

$ !!
: 최근 수행했던 명령어 수행
$ !l
: 최근에 수행했던 명령어 중, l로 시작하는 명령어 수행

$ date; sleep 2; !#
: date를 수행하고, 2초 뒤에 date를 두번 실행. 두 번 실행시 !# 사용

* DIRECTORY / FILE
$ tree -L 2
: 깊이 2만큼에 dir 트리를 보여줌
$ which bash
$ whereis bash
$ find /bin -name bash -exec ls -l '{}' \;
: bash 실행파일의 위치를 검색하고자 할 때.
$ type 명령어/함수
: type 뒤에 오는 명령어의 속성 파악

$ ls [ts]*
: t 또는 s로 시작하는 모든 파일 나열
$ ls [[:upper:]]*
: 대문자로 시작하는 모든 파일 나열
$ ls [![:upper:]].*
: 소문자로 끝나는 모든 파일 나열

* REDIRECTION 예제
$ cat /dev/null 2>&1 &
: 표준출력 1이 전달되는 곳으로 표준 에러2도 전달. 이를 백그라운드에서 수행
$ sort < ls.txt
: ls.txt를 입력파일로 설정하여 sort시키기  
$ cat <<- FILE
: FILE 내에 <tab>키가 제거된 채로 파일 내용 출력
$ tr '[A-Z]' '[a-z]' < UPPER
: UPPER 파일에 있는 대문자 문자열을 표준 입력으로 사용하여 소문자로 

* PIPE 
$ du -h --max-depth 1 | sort -nr
: 현재 디렉토리부터 깊이 1만큼만 출력. 내림차순 파일 크기 순서로 파일 정렬 
$ du -h * | sort -nr > $HOME/script.txt
: du 명령어는 용량을 알아보기 위한 명령.
: sort -n은 알파벳/숫자 기준으로 오름차순, -r은 반대로
$ find . -type f -print | wc -l
: file 타입들을 프린트 하되, 라인의 개수를 카운트해서 파일 수를 찾는 방법. 
$ find . -name "*.sh" | xargs mv -t ./basic
: sh로 끝나는 모든 파일들을 ./basic 폴더로 옮기기
$ du -h . | sort -n | sed -n '$p' 2> /dev/null
: 현재 dir 하위의 용량형식을 KB, MB로 정렬하고, 결과의 마지막라인 출력.
: 에러메세지가 나올 경우 /dev/null로 보내기

* Permission 관련
$ chown root:root perm.txt
: perm 파일의 소유자와 그룹을 root로 세팅
$ chgrp multi perm.txt
: perm 파일의 그룹을 multi로 변경
$ lsattr perm.txt
: perm.txt의 속성 보기
$ chattr +(+-i/+-a) perm.txt
: perm의 속성을 각 옵션으로 변경 
: (슈퍼유저 변경,삭제 불가/ 슈퍼유저 내용 추가 가능, 삭제 불가)
: 추가시 +, 삭제시 -를 사용.

* Job 관련
$ ps -ef
$ pstree -p
$ ps aux --forest
$ ps -p | head -n 15
: 시스템에서 실행되고 있는 ps 목록 보기
: p 옵션은 pid 함께 출력
% 실행prog&
: 백그라운드에서 실행 prog 수행
$ kill -9 PID
: PID가 10인 prog 종료
$ kill %1
: 가장 처음 수행한 ps 종료
$ kill -TERM `pidof prog명`
: prog명의 prog를 강제종료
$ jobs -l
: 현재 쉘에서 자신의 ps 목록 보기
$ jobs -r/-s
: 현재 수행/멈춘 ps 목록 보기
$ bg %2
: 두 번째로 수행했던 ps를 백그라운드로 보내기
$ fg %1
: 가장 처음 수행한 ps를 포그라운드로 가져오기

* User와 Group
$ su - 
: 일반 유저가 슈퍼유저로 사용 전환을 하기 위한 명령
$ who -q
$ users
: 현재 로그인 되어있는 유저를 출력
$ groups
: 현재 쉘에 접속해있는 유저가 속한 group 들을 출력
$ useradd guest
$ adduser guest
: 유저를 추가할 때 사용하는 명령어
$ passwd guest
: 해당 user의 비밀번호를 변경하는 경우 사용
$ userdel -r guest
: guest 계정을 삭제하되, 생성된 홈dir부터 모두 삭제
$ ac -d
: /var/log/wtmp 파일로부터 유저의 로그인 시간을 시간 단위로 출력
$ last reboot
: /var/log/wtmp 파일로부터 유저의 마지막 로그인 시간 출력. 
: reboot 옵션 사용하는 경우, reboot한 날짜와 시간 출력.
: 유저 이름을 옵션으로 사용 한다면, 유저에 대한 로그인 시간 출력.

* Terminal 관련
$ w
: 현재 유저의 터미널을 출력
$ ssty -a
: 터미널 설정을 출력/변경 가능
$ setterm -cursor off/on
: 터미널에서 커서를 끌/켤 수 있다.
$ wall "Rebppt after 5 minutes. Please logout."
: 모든 서버 접속자들에게 위와 같은 메세지를 보냄.
$ write guest
: guest 유저에게 해당 메세지. 적을 메세지를 적은 후 Ctrl C를 부르면 발송.
$ hostname
: /etc/sysconfig/network 파일에 지정되어 있는 hostname을 출력.

* Process Manager/Booting
$ shutdown -h now
: 시스템 즉시 종료
$ shutdown -r now
$ reboot
: 시스템 리부팅

* Network
$ ifconfig eth0 down/up
: 첫 번째 이더넷 카드를 종료/시작
$ iwconfig
: 무선랜 네트워크 인터페이스 환경 출력
$ ip link show
: 라우팅, 터널 정책을 출력하고 조작
$ route
: 커널 라우팅 테이블 정보를 출력/변경 가능

* File System
$ mount -t iso9660 /dev/cdrom /media/cdrom
: cdrom을 마운트하기. 
$ mount -o loop -t iso9660 -r cd_image.iso /media/cdimg
: CD 이미지 파일을 마운트하기 위한 방법
$ mount -t vfat /dev/sdb1 /mnt/usb
: usb 메모리 (vfat)을 마운트 하기 위한 방법
$ umount /mnt/usb
$ umount /mnt/cdrom
: 해당 파일 시스템을 언마운트 시키는 방법
$ sync
: 버퍼와 하드드라이버를 동기화 시킴

* Prompt
$ uname -n
: localhost와 localdomain 출력
$ PS1="$(uname -n) > "
: 프롬프트 형식을 "localhost >" 부터 시작하도록 변경
$ PS1="[\u@\h \W]\\$ "
: user명, 호스트이름, 디렉토리 표시. \$: UID=0이면 # 아니면 $
$ PS1="\W:\d> "
: 디렉토리와 날짜 표시
$ PS1="$C_LIGHTBLUE\u:$C_GREEN\W $C_WHITE\$ $C_DEFAULT"
: 이게 젤 깔끔한듯?
$ PS2="--->"
: 입력을 덜했을 때 나오는 >를 --->로 바꾸기. $ \ 명령 쳐보삼


- 리눅스에서는 로그인시 항상 /etc/bashrc 파일을 읽어들임.
- [root@localhost ~]#: root 유저, localhost라는 호스트에 접속, #은 슈퍼유저, $는 일반유저
- 장치 관련
$ mount -t ext3 /dev/hda1 /backup
: ext3 타입으로 mount 시키는 방법.
 +/dev/tty: prog이 실행되고 있는 터미널 윈도우 또는 콘솔
 +/dev/hda1: IDE 하드 디스크의 첫 번째 파티션
 +/dev/sda1: SCSI, S-ATA 하드 디스크의 첫 번째 파티
- 환경변수는 모두 대문자로 설정되어 있음
- 표준 입출력: 표준 입력{키보드}(fd = 0), 표준 출력{모니터}(fd = 1), 표준 에러{모니터}(fd=2)
- 퍼미션 명령들
 + chmod: 파일, dir 접근 권한을 변경하는 명령
 + su: 일시적으로 슈퍼유저 또는 다른 유저로 전환하는 명령
 +  chown: 파일, dir 소유자를 변경하는 명령
 + chgrp: 파일, dir의 그룹소유자를 변경하는 명령
- 윈도우 cmd에서 기본 유저 설정: c:\> ubuntu config --default-user root(혹은 yamp 등)

@ Chapter2 Summary

- 리눅스 부팅 과정
 1. init ps(pid = 1) 수행
 2. init process가 시스템을 초기화하고 터미널 라인을 오픈하기 위한 작업 시작
    stdin, stdout, stderr를 설정.
	/etc/rc.d/init.d dir에 런레벨별로 설정되어 있는 쉘 스크립트 실행.
 3. init과 연결된 ps들이 자신의 PID를 가지고 생성
- ps와 쉘
 + ps: 유일한 PID 번호에 의해 식별될 수 있는 실행 prog
 + 커널: ps를 제어하고 관리
- 시스템 콜: 프롬프트 또는 쉘 스크립트로부터 명령을 실행했을 때
             쉘은 빌트인 내부 코드 또는 디스크 저장장치에서 명령을 찾고 실행 명령 정렬.
             위와 같은 작업이 커널에서 이루어지는 과정
 + fork: 콜 ps의 복사본을 생성. CPU를 공유하는 자식 ps 생성.
 + wait: 자식 ps 하나가 종료될 때까지 부모 ps를 대기상태로 유지.
         성공시, 자식 ps 종료, 종료상태를 가지고 있는 자식 ps의 PID 리턴.
 	  	 자식 ps 보다 부모 ps가 먼저 종료 된다면, init ps는  자식 ps를 좀비 ps 만듦.
		 따라서, 부모 ps 대기상태로 만들 뿐 아니라 ps 정상 종료를 보증.
 + exec: 자식 쉘 수행 과정. 터미널 명령 수행 > fork > 자식 쉘은 타이핑된 명령 수행.
		 쉘은 새 prog를 위해 PATH 검색 > prog 발견 > exec 시스템 콜 호출 > 새 prog 오버랩.
 + exit: 새 prog는 exit 시스템 콜을 실행. 언제라도 중지 가능.
   	  	 자식 ps 종료시 sigchild 시그널을 보냄. 이를 부모 ps가 기다림.
		 종료상태 0은 prog 실행 성공, !0은 실패
 + ls를 입력할 시 ps 전 과정
  1. 부모 쉘은 자식 ps를 fork 후 대기상태
  2. 자식 쉘은 ls prog를 exec 시스템 콜로 호출.
  3. ls prog는 자식 쉘에서 실행되고, 부모로부터 모든 환경변수 등 정보들 물려 받음
  4. 새 prog 종료시, 자식 쉘 종료 후 부모 쉘은 깨어남.
  +. 마지막 명령의 종료상태는 $ echo $?를 통해 확인
- ps 종료: Ctrl C, Ctrl \
- 자식 쉘은 부모로부터 상속받은 변수를 변경 가능, 하지만 부모 쉘에 영향을 주지 못한다.
  $ export 변수명
  : 부모쉘에서 사용시 (자식쉘 $ bash를 통해 자식 쉘로 갈 수 있음) 환경변수 전달.
  : 자식쉘에서 수행해도 부모쉘에서 환경변수 사용불가
- 배시쉘 수행 순서: /etc/profile > .bash_profile > bash_login > .profile > bashrc
- 명령 처리 순서: alias > keyword(if, funcion, while..) > 함수 > built-in > prog/sh

@ Chapter 4 GREP

$ grep -ni ls ~/.bash* | grep -v history
: ~.bash로 시작하는 모든 파일에서 ls 문자열을 검색하되, 대소문자 무시, 줄번호 출력
: history이 들어간 내용은 제거 후 출력
$ grep -n [Kk]im test*
: test로 시작하는 파일에서 K혹은 k로 시작되는 문자열 출력
$ ls -l | grep '^d'
: dir 관련 정보만 출력
$ grep '\<[A-Z].*n\> .txt
: 대문자로 시작하고, n으로 끝나는 단어를 가진 문자열 검색
: $는 문자열의 가장 마지막, \< 혹은 \>는 단어의 처음과 끝
$ grep -c 'Dae' .txt
: 'Dae' 문자열을 가진 라인의 수를 출력
$ grep -w 'kim' .txt
: kim으로 떨어지는 단어를 가진 라인 출력
$ grep -i "$LOGNAME" .txt
: 환경변수의 내용을 가진 문자열 출력
$ grep '[a-z]\{5\} .txt
: 소문자 5글자 있는 문자열을 출력( {5,}라면, 5글자 이상)
$ grep '\<[A-Z].*n\> .txt
: 대문자로 시작하고, n으로 끝나는 단어를 가진 문자열 검색
: $는 문자열의 가장 마지막, \< 혹은 \>는 단어의 처음과 끝

@ Chapter 5 SED

$ sed -n '/^linux/p' .txt
: linux로 시작하는 라인을 출력
$ sed -n '/\<linux/p' .txt
: linux로 시작하는 문자를 가진 라인들을 출력
$ sed -n 's/linux/Linux/p' .txt
: linux를 포함하는 단어를 Linux로 바꾸어 출력
$ sed '1,3d' .txt
: 1~3 줄 제거 후 출력
$ sed -n '1,3p' .txt
: 1~3 줄만 출력

@ Chapter 6 AWK

$ awk '/길동/' .txt
: '길동'이 들어있는 라인 출력
$ awk '{print $1}' .txt
: 각 줄의 첫 번째 필드 출력
$ awk '/홍/{print $1, $2}' .txt
: '홍'이 들어가는 문자열의 첫 번째, 두 번째 필드 출력
$ df | awk '$4 > 180000000'
: Available이 해당 숫자보다 높은 파일 시스템 출력
$ date | awk '{print "Today is " $1 "day. \nnow: " $4}'
: date를 쳤을 때 출력되는 필드를 나누어 프린트 수행
$ awk 'BEGIN{OFMT="%.2f"; print 1.23456789}'
: 1.234~의 소숫점 둘째자리까지 끊어서 출력
$ echo "Linux" | awk '{printf "Hi %-15s\n", $1}'
: Hi Linux를 출력하되, -15%s는 왼쪽부터 채우는 것.
$ awk -f cmd파일 txt파일
: txt파일의 내용을 cmd파일의 명령어에 따라서 출력
$ awk '{print $0}' .txt
: txt 각 문자열의 모든 필드를 출력($0없이 print만 써도 동일 효과)
$ awk '{print NR, $0}' .txt
$ awk '{print $0, NF}' .txt
: txt 각 문자열 출력 전 줄 번호 출력
: txt 각 문자열 출력 후 필드 개수 출력
$ awk -F'[ :\t]' '{printf "%s %s\n", $1, $2}' .txt
: 공백, :, 탭 기준으로 필드 분리 후 1, 2번 필드 출력
$ awk '/^[A-Z][a-z]+/' .txt
: 문자열 가장 첫 글자가 대문자, 연달아 소문자가 나오는 문자열 모두 출력
$ awk '$2 ~ /\<[Kk]ilDong\>/' .txt
: 두 번째 필드가 KilDong/kilDong인 문자열 출력
: ~는 match 연산자. \< \> 는 일치하는 한 단어
$ awk '$2 !~ /[g동정]$/' .txt
: 두 번째 필드의 마지막 글자가 'g/동/정'이 아닌 경우만 출력
$ echo "123, 124" | awk '{max=($1>$2)?$1:$2; print max}'
: 123과 124 중 string으로 큰 수를 삼항 연산자로 판별 후 출력
$ awk '$2 ~ /정$/{sum=$3+$5;print sum}' .txt
: 파일에서 두번째 필드가 정으로 끝나는 문자열의 3번째 필드와 5번째 필드의 합을 출력
$ date | awk '{print $4}' | awk 'BEGIN{FS=":"; OFS="-"}{print $1, $2, $3} END{print "finish"}'
: 날짜의 시간을 추출하여 :로 분리되어있는 각 필드를 -로 연결하여 출력.
: 마지막 줄에 finish 문자열 출력
$ ls -al | awk '/txt$/{print $8}' | awk 'BEGIN{FS="\n"; ORS=", "}{print $0}' | sed "s/, /\n/g"
: ls -al의 8번째 요소들을 출력하되, 줄바꿈을 ',' 형태로 바꾸기.
: 단, 마지막 ','는 출력하지 않고 줄바꿈.

AWK 문법
@ if 조건문
$ head -n 5 .txt | awk '{if($5>30000) print "TRUE"; else print "FALSE"}'
: 파일 앞 5개 줄의 5번 째 필드가 3만보다 큰 경우 true를, 아닐 경우 false를 출력
$ tail -n 4 .txt | awk -F: '{for(i=1;i<=NF;++i) {if(i!=NF){printf "%s ", $i} else{print ""}}}'
: 파일 뒤 4개 줄을 :로 쪼개서, 조건에 따라 출력 (반복문 응용)
: break, continue도 사용 가능
$ head -n 1 .txt | awk '{i=1; while(i <= NF) {print $i; ++i}}'
: 파일 첫째줄을 각 필드별로 나누어 각 필드를 출력

@ 프로그램 관리
- next : awk 스크립트 파일로 수행시, 스크립트의 시작부터 다시 실행
- exit : awk 스크립트 파일로 수행시, awk 명령을 종료시킴
ex) next.txt 내용: 
{ if($1 ~ /Jane/) next; else {print}}
: 각 줄마다 Jane과 매칭되는지 확인 후 아니면 모든 필드 print
ex) exit.txt 내용:
{ exit(1) }
: return value를 1로 종료하여 $?를 통해 프로그램 상태 관측시 1

@ 배열
$ awk '{name[x++]=$2}; END{for(i=0; i<NR; ++i) print i, name[i]}' .txt
: .txt파일에서 두 번째 필드값을 증가시키며 name 배열에 넣고, 이를 프린트
: 이 때, 첫 값은 0부터 시작.
$ awk '{name[NR]=$2}; END{for(i=1; i<NR; ++i) print i, name[i]}' .txt
: 위와 같은 명령이지만, 첫 값은 1부터 시작
$ awk '/^압/{name[NR]=$2}; END{for(i in name) print name[i]}' .txt
: '압'으로 시작하는 문장들의 두번째 필드들을 출력
: 없는 경우 공백이 나오지만, 위와 같은 '특수 for문'을 사용하면 없는 애 출력 안함


